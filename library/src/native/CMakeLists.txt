cmake_minimum_required(VERSION 3.22.1)

project(inferkt C CXX)

option(INFER_BUILD_APPLE "Build infer for Apple targets" OFF)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)

if (INFER_BUILD_APPLE)
    message("Building for Apple platforms")

    set(CMAKE_OSX_DEPLOYMENT_TARGET 13.0)
    set(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE NO)

    find_library(METAL_LIBRARY Metal REQUIRED)
    find_library(FOUNDATION_LIBRARY Foundation REQUIRED)
    find_library(METALKIT_LIBRARY MetalKit REQUIRED)
    find_library(ACCELERATE_LIBRARY Accelerate REQUIRED)

    set(METAL_SOURCES
            ${SOURCE_DIR}/ggml-metal.m
            ${SOURCE_DIR}/ggml-metal.metal
    )
endif ()



set(PUBLIC_HEADERS
        ${SOURCE_DIR}/inferkt.h
        ${SOURCE_DIR}/llama.h
        ${SOURCE_DIR}/llama-impl.h
        ${SOURCE_DIR}/ggml.h
)

set(SOURCES
        ${SOURCE_DIR}/inferkt.cpp
        ${SOURCE_DIR}/Inference.cpp
        ${SOURCE_DIR}/ggml.c
        ${SOURCE_DIR}/ggml-alloc.c
        ${SOURCE_DIR}/ggml-backend.cpp
        ${SOURCE_DIR}/ggml-backend-reg.cpp
        ${SOURCE_DIR}/ggml-cpu/amx/amx.cpp
        ${SOURCE_DIR}/ggml-cpu/amx/mmq.cpp
        ${SOURCE_DIR}/ggml-cpu/ggml-cpu.c
        ${SOURCE_DIR}/ggml-cpu/ggml-cpu.cpp
        ${SOURCE_DIR}/ggml-cpu/ggml-cpu-aarch64.cpp
        ${SOURCE_DIR}/ggml-cpu/ggml-cpu-quants.c
        ${SOURCE_DIR}/ggml-cpu/ggml-cpu-traits.cpp
        ${SOURCE_DIR}/ggml-cpu/unary-ops.cpp
        ${SOURCE_DIR}/ggml-cpu/binary-ops.cpp
        ${SOURCE_DIR}/ggml-cpu/sgemm.cpp
        ${SOURCE_DIR}/ggml-cpu/vec.cpp
        ${SOURCE_DIR}/ggml-cpu/ops.cpp
        ${SOURCE_DIR}/ggml-opt.cpp
        ${SOURCE_DIR}/ggml-threading.cpp
        ${SOURCE_DIR}/ggml-quants.c
        ${SOURCE_DIR}/gguf.cpp
        ${SOURCE_DIR}/log.cpp
        ${SOURCE_DIR}/llama-impl.cpp
        ${SOURCE_DIR}/llama-grammar.cpp
        ${SOURCE_DIR}/llama-sampling.cpp
        ${SOURCE_DIR}/llama-vocab.cpp
        ${SOURCE_DIR}/llama-adapter.cpp
        ${SOURCE_DIR}/llama-chat.cpp
        ${SOURCE_DIR}/llama-context.cpp
        ${SOURCE_DIR}/llama-kv-cache.cpp
        ${SOURCE_DIR}/llama-arch.cpp
        ${SOURCE_DIR}/llama-batch.cpp
        ${SOURCE_DIR}/llama-cparams.cpp
        ${SOURCE_DIR}/llama-hparams.cpp
        ${SOURCE_DIR}/llama.cpp
        ${SOURCE_DIR}/llama-model.cpp
        ${SOURCE_DIR}/llama-model-loader.cpp
#        ${SOURCE_DIR}/llama-model-saver.cpp
        ${SOURCE_DIR}/llama-mmap.cpp
        ${SOURCE_DIR}/llama-vocab.cpp
        ${SOURCE_DIR}/llama-memory.cpp
        ${SOURCE_DIR}/llama-io.cpp
        ${SOURCE_DIR}/llama-graph.cpp
        ${SOURCE_DIR}/sampling.cpp
        ${SOURCE_DIR}/unicode-data.cpp
        ${SOURCE_DIR}/unicode.cpp
        ${SOURCE_DIR}/common.cpp
        ${SOURCE_DIR}/chat.cpp
        ${SOURCE_DIR}/json-schema-to-grammar.cpp
        ${SOURCE_DIR}/minja/minja.hpp
        ${SOURCE_DIR}/minja/chat-template.hpp
        ${SOURCE_DIR}/json.hpp
        # Multimodal support
        ${SOURCE_DIR}/tools/mtmd/mtmd.cpp
        ${SOURCE_DIR}/tools/mtmd/clip.cpp
        ${SOURCE_DIR}/tools/mtmd/mtmd-helper.cpp
)


if (INFER_BUILD_APPLE)
    if (INFER_IOS_BUILD STREQUAL "iphoneos")
        message("Apple platform ${INFER_IOS_BUILD}")
        list(APPEND SOURCES ${METAL_SOURCES})
        enable_language(ASM)

        add_compile_definitions(GGML_METAL_EMBED_LIBRARY)

        set(METALLIB_COMMON "${SOURCE_DIR}/ggml-common.h")
        set(METALLIB_SOURCE "${SOURCE_DIR}/ggml-metal.metal")
        set(METALLIB_IMPL "${SOURCE_DIR}/ggml-metal-impl.h")

        file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/autogenerated")

        # merge ggml-common.h and ggml-metal.metal into a single file
        set(METALLIB_EMBED_ASM "${CMAKE_BINARY_DIR}/autogenerated/ggml-metal-embed.s")
        set(METALLIB_SOURCE_EMBED "${CMAKE_BINARY_DIR}/autogenerated/ggml-metal-embed.metal")
        set(METALLIB_SOURCE_EMBED_TMP "${CMAKE_BINARY_DIR}/autogenerated/ggml-metal-embed.metal.tmp")

        add_custom_command(
                OUTPUT ${METALLIB_EMBED_ASM}
                COMMAND echo "Embedding Metal library"
                COMMAND sed -e '/__embed_ggml-common.h__/r ${METALLIB_COMMON}' -e '/__embed_ggml-common.h__/d' < ${METALLIB_SOURCE} > ${METALLIB_SOURCE_EMBED_TMP}
                COMMAND sed -e '/\#include \"ggml-metal-impl.h\"/r ${METALLIB_IMPL}' -e '/\#include \"ggml-metal-impl.h\"/d' < ${METALLIB_SOURCE_EMBED_TMP} > ${METALLIB_SOURCE_EMBED}
                COMMAND echo ".section __DATA,__ggml_metallib" > ${METALLIB_EMBED_ASM}
                COMMAND echo ".globl _ggml_metallib_start" >> ${METALLIB_EMBED_ASM}
                COMMAND echo "_ggml_metallib_start:" >> ${METALLIB_EMBED_ASM}
                COMMAND echo ".incbin \\\"${METALLIB_SOURCE_EMBED}\\\"" >> ${METALLIB_EMBED_ASM}
                COMMAND echo ".globl _ggml_metallib_end" >> ${METALLIB_EMBED_ASM}
                COMMAND echo "_ggml_metallib_end:" >> ${METALLIB_EMBED_ASM}
                DEPENDS ../ggml-common.h ggml-metal.metal ggml-metal-impl.h
                COMMENT "Generate assembly for embedded Metal library"
        )
    endif ()


endif ()

if(INFER_BUILD_APPLE)
    add_library(inferkt STATIC ${SOURCES})
else()
    add_library(inferkt SHARED ${SOURCES})
endif()



target_include_directories(inferkt
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/ggml-cpu>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/tools/mtmd>
        $<INSTALL_INTERFACE:include>
)

target_include_directories(inferkt PUBLIC ${PUBLIC_HEADERS})

target_compile_features(inferkt PRIVATE cxx_std_17)

if (INFER_BUILD_APPLE)
    set(COMPILE_OPTIONS
            -DGGML_USE_CPU
            -DGGML_USE_ACCELERATE
    )
    if (INFER_IOS_BUILD STREQUAL "iphoneos")
        target_sources(inferkt PRIVATE ${METALLIB_EMBED_ASM})
        list(APPEND COMPILE_OPTIONS
                -DGGML_METAL_EMBED_LIBRARY
                -DGGML_USE_METAL
        )
    endif ()

    target_link_libraries(inferkt PRIVATE
            ${ACCELERATE_LIBRARY}
            ${FOUNDATION_LIBRARY}
            ${METAL_LIBRARY}
            ${METALKIT_LIBRARY}
    )
    target_compile_options(
            inferkt
            PRIVATE
            ${COMPILE_OPTIONS}
            -pthread
    )
    target_compile_options(inferkt PRIVATE -O3 -DNDEBUG)
#else ()
#    target_compile_options(
#            inferkt
#            PRIVATE
#            -DLM_GGML_USE_CPU
##            -DLM_GGML_USE_CPU_AARCH64
#            -pthread
#    )
#    target_compile_options(inferkt PRIVATE -O3 -DNDEBUG)
endif ()
